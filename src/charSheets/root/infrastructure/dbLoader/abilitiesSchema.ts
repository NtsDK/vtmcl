import Ajv, { JSONSchemaType } from "ajv";

import { Abilities, AbilitiesExtension } from "../../domain";

const abilitiesProps: Record<keyof Abilities, { type: "number" }> = {
  alertness: { type: "number" },
  athletics: { type: "number" },
  brawl: { type: "number" },
  empathy: { type: "number" },
  expression: { type: "number" },
  intimidation: { type: "number" },
  leadership: { type: "number" },
  streetwise: { type: "number" },
  subterfuge: { type: "number" },
  awareness: { type: "number" },
  animalken: { type: "number" },
  crafts: { type: "number" },
  drive: { type: "number" },
  etiquette: { type: "number" },
  firearms: { type: "number" },
  melee: { type: "number" },
  performance: { type: "number" },
  stealth: { type: "number" },
  survival: { type: "number" },
  larceny: { type: "number" },
  academics: { type: "number" },
  computer: { type: "number" },
  finance: { type: "number" },
  investigation: { type: "number" },
  law: { type: "number" },
  medicine: { type: "number" },
  occult: { type: "number" },
  politics: { type: "number" },
  science: { type: "number" },
  technology: { type: "number" },

  enigmas: { type: "number" },
  gremayre: { type: "number" },
  kenning: { type: "number" },
  legerdemain: { type: "number" },
  archery: { type: "number" },
  commerce: { type: "number" },
  ride: { type: "number" },
  hearthWisdom: { type: "number" },
  seneschal: { type: "number" },
  theology: { type: "number" },
};

export const abilitiesSchema: JSONSchemaType<Abilities> = {
  type: "object",
  properties: abilitiesProps,
  required: Object.keys(abilitiesProps) as unknown as (keyof Abilities)[],
  additionalProperties: false,
};

export const abilitiesExtensionSchema: JSONSchemaType<AbilitiesExtension> = {
  type: "object",
  properties: {
    talentName1: { type: "string" },
    talentValue1: { type: "number" },
    talentName2: { type: "string" },
    talentValue2: { type: "number" },
    skillName1: { type: "string" },
    skillValue1: { type: "number" },
    skillName2: { type: "string" },
    skillValue2: { type: "number" },
    knowledgeName1: { type: "string" },
    knowledgeValue1: { type: "number" },
    knowledgeName2: { type: "string" },
    knowledgeValue2: { type: "number" },
  },
  required: [
    "talentName1",
    "talentValue1",
    "talentName2",
    "talentValue2",
    "skillName1",
    "skillValue1",
    "skillName2",
    "skillValue2",
    "knowledgeName1",
    "knowledgeValue1",
    "knowledgeName2",
    "knowledgeValue2",
  ],
  additionalProperties: false,
};
